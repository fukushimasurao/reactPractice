{"version":3,"sources":["components/Booklist.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Booklist","props","useState","bookData","setBookData","useEffect","getData","language","then","response","class","scope","data","items","map","books","index","volumeInfo","title","authors","publishedDate","imageLinks","src","smallThumbnail","alt","process","getDataFromAPI","keyword","a","axios","get","App","text","setText","languages","to","type","placeholder","onChange","e","target","value","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"iMA+CeA,EA7CE,SAAAC,GAAU,IAAD,EACUC,mBAAS,MADnB,mBACfC,EADe,KACLC,EADK,KAOtB,OALAC,qBAAU,WAAO,IAAD,EACZ,UAAAJ,EAAMK,eAAN,cAAAL,EAAgBA,EAAMM,UACjBC,MAAK,SAACC,GAAD,OAAcL,EAAYK,QACrC,CAACR,IAGA,qBAAKS,MAAM,2BAAX,SACI,wBAAOA,MAAM,QAAb,UACI,gCACI,+BACI,oBAAIC,MAAM,MAAV,iBACA,oBAAIA,MAAM,MAAV,0BACA,oBAAIA,MAAM,MAAV,0BACA,oBAAIA,MAAM,MAAV,sCACA,oBAAIA,MAAM,MAAV,+BAGR,gCAEqB,OAAbR,EACI,+CAGAA,EAASS,KAAKC,MAAMC,KAAI,SAACC,EAAOC,GAAR,OACpB,+BACI,6BAAKA,EAAQ,IACb,6BAAKD,EAAME,WAAWC,QACtB,6BAAKH,EAAME,WAAWE,UACtB,6BAAKJ,EAAME,WAAWG,gBACtB,6BAAKL,EAAME,WAAWI,WAChB,qBAAKC,IAAKP,EAAME,WAAWI,WAAWE,eAAgBC,IAAI,gBAC1D,qBAAKF,IAAG,UAAKG,iBAAL,mBAA8CD,IAAI,iBAP3DR,c,+BCtBnCU,EAAc,uCAAG,WAAMC,GAAN,SAAAC,EAAA,4DACA,yDADA,SAENC,IAAMC,IAAN,UADM,0DACN,OAA0BH,IAFpB,mFAAH,sDA2ELI,EAtEH,WAAO,IAAD,EACU7B,mBAAS,IADnB,mBACP8B,EADO,KACDC,EADC,KAKRC,EAAY,CAAC,QAAS,MAAO,UAAWF,GAC9C,OACI,cAAC,IAAD,UACI,gCACI,uDACA,+BACI,6BAAI,cAAC,IAAD,CAAMG,GAAG,IAAT,qBACJ,6BAAI,cAAC,IAAD,CAAMA,GAAG,OAAT,mBACJ,6BAAI,cAAC,IAAD,CAAMA,GAAG,WAAT,uBACJ,+BACI,uBACIC,KAAK,OACL1B,MAAM,oBACN2B,YAAY,yDACZC,SAjBH,SAACC,GAClBN,GAAQ,kBAAMM,EAAEC,OAAOC,YAkBP,cAAC,IAAD,CAAMN,GAAE,kBAAaH,GAArB,SAA6B,wBAAQtB,MAAM,kBAAd,kCAIrC,uBACA,cAAC,IAAD,CACIgC,OAAK,EAACC,KAAK,IACXC,OACI,SAAA3C,GAAK,OAAI,cAAC,EAAD,CACLM,SAAU2B,EAAU,GACpB5B,QAAS,SAAAqB,GAAO,OAAID,EAAeC,SAI/C,cAAC,IAAD,CACIgB,KAAK,OACLC,OACI,SAAA3C,GAAK,OACD,cAAC,EAAD,CACIM,SAAU2B,EAAU,GACpB5B,QAAS,SAAAqB,GAAO,OAAID,EAAeC,SAInD,cAAC,IAAD,CACIgB,KAAK,WACLC,OACI,SAAA3C,GAAK,OACD,cAAC,EAAD,CACIM,SAAU2B,EAAU,GACpB5B,QAAS,SAAAqB,GAAO,OAAID,EAAeC,SAInD,cAAC,IAAD,CACIgB,KAAI,kBAAaX,GACjBY,OACI,SAAA3C,GAAK,OACD,cAAC,EAAD,CACIM,SAAUyB,EACV1B,QAAS,SAAAqB,GAAO,OAAID,EAAeC,eC5DpDkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvC,MAAK,YAAkD,IAA/CwC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAAST,OACP,cAAC,IAAMU,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.637cde3b.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst Booklist = props => {\n    const [bookData, setBookData] = useState(null);\n    useEffect(() => {\n        props.getData?.(props.language)\n            .then((response) => setBookData(response));\n    }, [props]);\n\n    return (\n        <div class=\"mx-auto w-75 text-center\">\n            <table class=\"table\">\n                <thead>\n                    <tr>\n                        <th scope=\"col\">No.</th>\n                        <th scope=\"col\">ÁΩ≤Âêç</th>\n                        <th scope=\"col\">ËëóËÄÖ</th>\n                        <th scope=\"col\">Âá∫ÁâàÂπ¥Êúà</th>\n                        <th scope=\"col\">ÁîªÂÉè</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        bookData === null ? (\n                            <p>now loading...</p>\n                        ) : (\n\n                            bookData.data.items.map((books, index) => (\n                                <tr key={index}>\n                                    <th>{index + 1}</th>\n                                    <td>{books.volumeInfo.title}</td>\n                                    <td>{books.volumeInfo.authors}</td>\n                                    <td>{books.volumeInfo.publishedDate}</td>\n                                    <td>{books.volumeInfo.imageLinks\n                                        ? <img src={books.volumeInfo.imageLinks.smallThumbnail} alt='sampleImage' />\n                                        : <img src={`${process.env.PUBLIC_URL}/img/sample.png`} alt='getImage' />}</td>\n                                </tr>\n                            ))\n                        )\n                    }\n\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default Booklist;\n","import React, { useState } from 'react';\nimport Booklist from './components/Booklist';\n\nimport axios from 'axios';\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\n\nconst getDataFromAPI = async keyword => {\n    const requestUrl = 'https://www.googleapis.com/books/v1/volumes?q=intitle:';\n    return await axios.get(`${requestUrl}${keyword}`);\n}\n\nconst App = () => {\n    const [text, setText] = useState('');\n    const handleChange = (e) => {\n        setText(() => e.target.value)\n    }\n    const languages = ['React', 'Vue', 'Angular', text];\n    return (\n        <BrowserRouter>\n            <div>\n                <h1>react appüç£</h1>\n                <ul>\n                    <li><Link to='/'>React</Link></li>\n                    <li><Link to='/vue'>vue</Link></li>\n                    <li><Link to='/angular'>Angular</Link></li>\n                    <li>\n                        <input\n                            type='text'\n                            class='form-control w-25'\n                            placeholder='Ê§úÁ¥¢„Åó„Åü„ÅÑÊú¨„ÅÆÂêçÂâç'\n                            onChange={handleChange}\n                        />\n                        <Link to={`/search/${text}`}><button class='btn btn-primary'>Ê§úÁ¥¢</button></Link>\n                    </li>\n                </ul>\n\n                <hr />\n                <Route\n                    exact path='/'\n                    render={\n                        props => <Booklist\n                            language={languages[0]}\n                            getData={keyword => getDataFromAPI(keyword)}\n                        />\n                    }\n                />\n                <Route\n                    path='/vue'\n                    render={\n                        props =>\n                            <Booklist\n                                language={languages[1]}\n                                getData={keyword => getDataFromAPI(keyword)}\n                            />\n                    }\n                />\n                <Route\n                    path='/angular'\n                    render={\n                        props =>\n                            <Booklist\n                                language={languages[2]}\n                                getData={keyword => getDataFromAPI(keyword)}\n                            />\n                    }\n                />\n                <Route\n                    path={`/search/${text}`}\n                    render={\n                        props =>\n                            <Booklist\n                                language={text}\n                                getData={keyword => getDataFromAPI(keyword)}\n                            />\n                    }\n                />\n            </div>\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}